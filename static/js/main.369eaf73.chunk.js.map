{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","types/SearchButtonText.ts","types/PosterURL.ts","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","SearchButtonText","PosterURL","FindMovie","saveNewMovie","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","setMovie","_useState7","_useState8","hasError","setHasError","_useState9","Find","_useState10","buttonText","setButtonText","_Fragment","onSubmit","e","preventDefault","fetch","concat","then","res","json","catch","error","Response","Error","getMovie","trimEnd","response","_ref2","Plot","Poster","Title","imdbID","None","Dafault","FindAgain","finally","htmlFor","type","id","placeholder","cn","value","onChange","target","disabled","onClick","App","setMovies","newMovie","find","prevMovies","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.369eaf73.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","export enum SearchButtonText {\n  Find = 'Find a movie',\n  FindAgain = 'Search again',\n}\n","export enum PosterURL {\n  None = 'N/A',\n  Dafault = 'https://via.placeholder.com/360x270.png?text=no%20preview',\n}\n","import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport { getMovie } from '../../api';\nimport './FindMovie.scss';\nimport { Movie } from '../../types/Movie';\nimport { MovieData } from '../../types/MovieData';\nimport { MovieCard } from '../MovieCard';\nimport { SearchButtonText } from '../../types/SearchButtonText';\nimport { PosterURL } from '../../types/PosterURL';\n\nconst imdbUrl = 'https://www.imdb.com/title/';\n\ntype Props = {\n  saveNewMovie: (movie: Movie) => void,\n};\n\nexport const FindMovie: React.FC<Props> = ({ saveNewMovie }) => {\n  const [query, setQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [hasError, setHasError] = useState(false);\n  const [buttonText, setButtonText] = useState(SearchButtonText.Find);\n\n  const handleChangeTitle = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.target.value);\n    setHasError(false);\n  };\n\n  const findMovie = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setIsLoading(true);\n    getMovie(query.trimEnd())\n      .then(response => {\n        if ('imdbID' in response) {\n          const {\n            Plot, Poster, Title, imdbID,\n          } = response as MovieData;\n\n          setMovie({\n            title: Title,\n            description: Plot,\n            imgUrl:\n              Poster !== PosterURL.None\n                ? Poster\n                : PosterURL.Dafault,\n            imdbUrl: `${imdbUrl}${imdbID}`,\n            imdbId: imdbID,\n          });\n\n          setButtonText(SearchButtonText.FindAgain);\n        } else {\n          setHasError(true);\n        }\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const addMovie = () => {\n    if (movie) {\n      saveNewMovie(movie);\n      setQuery('');\n      setMovie(null);\n      setButtonText(SearchButtonText.Find);\n    }\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={findMovie}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={cn(\n                'input',\n                { 'is-danger': hasError },\n              )}\n              value={query}\n              onChange={handleChangeTitle}\n            />\n          </div>\n\n          {hasError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn(\n                'button is-light',\n                {\n                  'is-loading': isLoading,\n                },\n              )}\n              disabled={!query}\n            >\n              {buttonText}\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {movie && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={addMovie}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'http://www.omdbapi.com/?apikey=b685dd92';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch((error) => ({\n      Response: 'False',\n      Error: error,\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const setNewMoviesList = (newMovie: Movie) => {\n    if (!movies.find(movie => movie.imdbId === newMovie.imdbId)) {\n      setMovies(prevMovies => [...prevMovies, newMovie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie saveNewMovie={setNewMoviesList} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}